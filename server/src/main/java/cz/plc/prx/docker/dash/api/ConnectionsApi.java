/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package cz.plc.prx.docker.dash.api;

import cz.plc.prx.docker.dash.model.DockerConnection;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-12-11T11:40:01.766Z")

@Api(value = "connections", description = "the connections API")
public interface ConnectionsApi {

    @ApiOperation(value = "Delete docker connection", notes = "Delete docker connection from DB", response = Void.class, tags={ "Connections", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Void.class),
        @ApiResponse(code = 404, message = "A connection with the specified Instance ID was not found.", response = Void.class) })
    
    @RequestMapping(value = "/connections/{connection}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> connectionDelete(@ApiParam(value = "name of selected connection", required = true) @PathVariable("connection") String connection);


    @ApiOperation(value = "Get connection by \"connection\" id", notes = "Return docker connection with path param connection from DB", response = DockerConnection.class, responseContainer = "List", tags={ "Connections", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = DockerConnection.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value", response = Void.class) })
    
    @RequestMapping(value = "/connections/{connection}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<DockerConnection>> connectionGet(@ApiParam(value = "name of selected connection", required = true) @PathVariable("connection") String connection);


    @ApiOperation(value = "save docker connection to DB", notes = "", response = Void.class, tags={ "Connections", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Void.class),
        @ApiResponse(code = 201, message = "successfully created", response = Void.class) })
    
    @RequestMapping(value = "/connections",
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    ResponseEntity<Void> connectionPost(@ApiParam(value = "", required=true) @RequestPart(value="name", required=true)  String name,@ApiParam(value = "", required=true) @RequestPart(value="address", required=true)  String address,@ApiParam(value = "", required=true) @RequestPart(value="dockerTLSVerify", required=false)  String dockerTLSVerify,@ApiParam(value = "") @RequestPart(value="dockerConfig", required=false)  MultipartFile dockerConfig,@ApiParam(value = "") @RequestPart(value = "file",required = false) MultipartFile upfile);


    @ApiOperation(value = "Get all connections", notes = "Return docker connections from mapDB", response = DockerConnection.class, responseContainer = "List", tags={ "Connections", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = DockerConnection.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value", response = Void.class) })
    
    @RequestMapping(value = "/connections",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<DockerConnection>> connectionsGet();

}
